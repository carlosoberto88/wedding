name: Jenkins Status Monitor

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:  # Allows manual triggering

jobs:
  check-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install cheerio
          
      - name: Create monitoring script
        run: |
          cat << 'EOL' > monitor-jenkins.js
          const https = require('https');
          const cheerio = require('cheerio');

          function sendToSlack(message) {
            return new Promise((resolve, reject) => {
              const webhookUrl = process.env.SLACK_WEBHOOK_URL;
              const data = JSON.stringify({
                text: message,
                username: 'Jenkins Status Monitor',
                icon_emoji: ':jenkins:'
              });

              const parsedUrl = new URL(webhookUrl);
              const options = {
                hostname: parsedUrl.hostname,
                path: parsedUrl.pathname + parsedUrl.search,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': Buffer.byteLength(data)
                }
              };
              
              const req = https.request(options, (res) => {
                res.on('end', () => resolve());
              });

              req.on('error', (error) => reject(error));
              req.write(data);
              req.end();
            });
          }

          function checkJenkinsStatus() {
            return new Promise((resolve, reject) => {
              https.get('https://status.jenkins.io/', (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => {
                  try {
                    const $ = cheerio.load(data);
                    const services = [];
                    
                    // Extract services and their status
                    $('body').text().split('\n').forEach(line => {
                      const match = line.match(/([\w\.\-]+\.jenkins\.io|\bpublick8s\b)\s+\(\?\)(Operational|Disrupted)/);
                      if (match) {
                        services.push({
                          name: match[1],
                          status: match[2]
                        });
                      }
                    });
                    
                    resolve(services);
                  } catch (error) {
                    reject(error);
                  }
                });
              }).on('error', reject);
            });
          }

          async function main() {
            try {
              const services = await checkJenkinsStatus();
              
              const statusEmoji = {
                'Operational': '✅',
                'Disrupted': '🚨'
              };

              const disruptedServices = services.filter(
                service => service.status !== 'Operational'
              );

              let message;

              if (disruptedServices.length > 0) {
                const servicesStatus = disruptedServices.map(service => {
                  const emoji = statusEmoji[service.status] || '❓';
                  return emoji + ' *' + service.name + '*\nStatus: ' + service.status;
                }).join('\n\n');

                message = '🚨 *Jenkins Services Alert*\n\n' + servicesStatus;
              } else {
                const servicesList = services.map(service => 
                  '✅ ' + service.name
                ).join('\n');

                message = '✅ *All Jenkins Services Operational*\n\n' + servicesList;
              }

              message += '\n\nLast checked: ' + new Date().toLocaleString();
              
              await sendToSlack(message);
              
            } catch (error) {
              console.error('Error:', error);
              await sendToSlack(':x: Error checking Jenkins status: ' + error.message);
            }
          }

          main();
          EOL

      - name: Run monitor
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: node monitor-jenkins.js
