name: GitHub Status Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  check-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create monitoring script
        run: |
          cat << 'EOL' > monitor.js
          const https = require('https');

          function sendToSlack(message) {
            return new Promise((resolve, reject) => {
              const webhookUrl = process.env.SLACK_WEBHOOK_URL;
              const data = JSON.stringify({
                text: message,
                username: 'GitHub Status Monitor',
                icon_emoji: ':github:'
              });

              const parsedUrl = new URL(webhookUrl);
              const options = {
                hostname: parsedUrl.hostname,
                path: parsedUrl.pathname + parsedUrl.search,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': Buffer.byteLength(data)
                }
              };
              
              const req = https.request(options, (res) => {
                res.on('end', () => resolve());
              });

              req.on('error', (error) => reject(error));
              req.write(data);
              req.end();
            });
          }

          function checkGitHubStatus() {
            return new Promise((resolve, reject) => {
              https.get('https://www.githubstatus.com/api/v2/summary.json', (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => {
                  try {
                    const response = JSON.parse(data);
                    resolve(response);
                  } catch (error) {
                    reject(error);
                  }
                });
              }).on('error', reject);
            });
          }

          async function main() {
            try {
              const response = await checkGitHubStatus();
              
              const allServices = response.components.filter(
                component => !component.name.includes('Visit www.githubstatus.com')
              );

              const statusEmoji = {
                'operational': '✅',
                'degraded_performance': '⚠️',
                'partial_outage': '🚨',
                'major_outage': '❌',
                'under_maintenance': '🔧'
              };

              const nonOperationalServices = allServices.filter(
                service => service.status !== 'operational'
              );

              let message;

              if (nonOperationalServices.length > 0) {
                const servicesStatus = nonOperationalServices.map(service => {
                  const emoji = statusEmoji[service.status] || '❓';
                  const status = service.status.replace('_', ' ').toUpperCase();
                  const description = service.description ? '\nDescription: ' + service.description : '';
                  const updated = new Date(service.updated_at).toLocaleString();
                  
                  return emoji + ' *' + service.name + '*\nStatus: ' + status + description + '\nLast Updated: ' + updated;
                }).join('\n\n');

                message = '🚨 *GitHub Service Alert*\n\n' + servicesStatus;
              } else {
                const servicesList = allServices.map(service => 
                  '✅ ' + service.name
                ).join('\n');

                message = '✅ *All GitHub Services Operational*\n\n' + servicesList;
              }

              message += '\n\n*Overall GitHub Status*: ' + response.status.description;
              //await sendToSlack(message);
              
            } catch (error) {
              console.error('Error:', error);
              await sendToSlack(':x: Error checking GitHub status: ' + error.message);
            }
          }

          main();
          EOL

      - name: Run monitor
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: node monitor.js
