name: GitHub Actions Status Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  check-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create monitoring script
        run: |
          cat > monitor.js << 'EOF'
          const https = require('https');

          function sendToSlack(message) {
            return new Promise((resolve, reject) => {
              const webhookUrl = process.env.SLACK_WEBHOOK_URL;
              const data = JSON.stringify({
                text: message,
                username: 'GitHub Actions Monitor',
                icon_emoji: ':octocat:'
              });

              const parsedUrl = new URL(webhookUrl);
              const options = {
                hostname: parsedUrl.hostname,
                path: parsedUrl.pathname + parsedUrl.search,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': Buffer.byteLength(data)
                }
              };
              
              const req = https.request(options, (res) => {
                res.on('end', () => resolve());
              });

              req.on('error', (error) => reject(error));
              req.write(data);
              req.end();
            });
          }

          async function main() {
            try {
              // Check GitHub Status
              const req = https.get(
                'https://www.githubstatus.com/api/v2/summary.json',
                async (res) => {
                  let data = '';
                  res.on('data', (chunk) => data += chunk);
                  res.on('end', async () => {
                    const response = JSON.parse(data);
                    
                    // Find GitHub Actions component
                    const actionsComponent = response.components.find(
                      component => component.name.toLowerCase().includes('actions')
                    );

                    if (!actionsComponent) {
                      await sendToSlack('⚠️ Could not find GitHub Actions status in the response');
                      return;
                    }
                    
                    const statusEmoji = {
                      'operational': '✅',
                      'degraded_performance': '⚠️',
                      'partial_outage': '🚨',
                      'major_outage': '❌'
                    };
                    
                    const emoji = statusEmoji[actionsComponent.status] || '❓';
                    const message = `GitHub Actions: ${emoji} ${actionsComponent.status.replace('_', ' ').toUpperCase()}
Status: ${actionsComponent.status}
Description: ${actionsComponent.description || 'No description available'}
Last Updated: ${new Date(actionsComponent.updated_at).toLocaleString()}

Overall GitHub Status: ${response.status.indicator}
${response.status.description}`;
                    
                    // Only send message if status is not operational
                    if (actionsComponent.status !== 'operational') {
                      await sendToSlack(message);
                    }
                  });
                }
              );
              
              req.on('error', async (error) => {
                await sendToSlack(`:x: Error checking GitHub Actions status: ${error.message}`);
              });
            } catch (error) {
              console.error('Error:', error);
            }
          }

          main();
          EOF

      - name: Run monitor
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: node monitor.js
