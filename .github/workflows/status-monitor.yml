name: GitHub Status Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  check-status:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Create monitoring script
        run: |
          cat > monitor.js << 'EOF'
          const https = require('https');

          function sendToSlack(message) {
            return new Promise((resolve, reject) => {
              const webhookUrl = process.env.SLACK_WEBHOOK_URL;
              const data = JSON.stringify({
                text: message,
                username: 'GitHub Status Monitor',
                icon_emoji: ':github:'
              });

              const parsedUrl = new URL(webhookUrl);
              const options = {
                hostname: parsedUrl.hostname,
                path: parsedUrl.pathname + parsedUrl.search,
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Content-Length': Buffer.byteLength(data)
                }
              };
              
              const req = https.request(options, (res) => {
                res.on('end', () => resolve());
              });

              req.on('error', (error) => reject(error));
              req.write(data);
              req.end();
            });
          }

          function checkGitHubStatus() {
            return new Promise((resolve, reject) => {
              https.get('https://www.githubstatus.com/api/v2/summary.json', (res) => {
                let data = '';
                res.on('data', (chunk) => data += chunk);
                res.on('end', () => {
                  try {
                    const response = JSON.parse(data);
                    resolve(response);
                  } catch (error) {
                    reject(error);
                  }
                });
              }).on('error', reject);
            });
          }

          async function main() {
            try {
              const response = await checkGitHubStatus();
              
              // Filter out components that are not operational
              const nonOperationalServices = response.components.filter(
                component => component.status !== 'operational' && 
                            !component.name.includes('Visit www.githubstatus.com')
              );

              if (nonOperationalServices.length > 0) {
                const statusEmoji = {
                  'operational': '‚úÖ',
                  'degraded_performance': '‚ö†Ô∏è',
                  'partial_outage': 'üö®',
                  'major_outage': '‚ùå',
                  'under_maintenance': 'üîß'
                };

                const servicesStatus = nonOperationalServices.map(service => {
                  const emoji = statusEmoji[service.status] || '‚ùì';
                  return `${emoji} *${service.name}*
Status: ${service.status.replace('_', ' ').toUpperCase()}
${service.description ? `Description: ${service.description}` : ''}
Last Updated: ${new Date(service.updated_at).toLocaleString()}`;
                }).join('\n\n');

                const message = `üö® *GitHub Service Alert*\n\n${servicesStatus}\n\n*Overall GitHub Status*: ${response.status.description}`;
                
                await sendToSlack(message);
              }
              
            } catch (error) {
              console.error('Error:', error);
              await sendToSlack(`:x: Error checking GitHub status: ${error.message}`);
            }
          }

          main();
          EOF

      - name: Run monitor
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: node monitor.js
